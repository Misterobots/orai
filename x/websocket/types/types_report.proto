syntax = "proto3";
package oraichain.orai.websocket;
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

import "x/websocket/types/types_dsource_result.proto";
import "x/websocket/types/types_tcase_result.proto";
import "x/websocket/types/types_reporter.proto";

option go_package = "github.com/oraichain/orai/x/websocket/types";

// Report stores the result of the data source when validator executes it
message Report {
  option (gogoproto.goproto_stringer) = true;    
  string requestID = 1 [(gogoproto.jsontag) = "request_id,omitempty"];
  repeated DataSourceResult DataSourceResults = 2 [(gogoproto.moretags) = "json:\"data_source_result\"", (gogoproto.customname) = "DataSourceResults"];	  
  repeated TestCaseResult TestCaseResults = 3 [(gogoproto.moretags) = "json:\"test_case_results\"", (gogoproto.customname) = "TestCaseResults"];	  
  int64 blockHeight = 4 [(gogoproto.jsontag) = "block_height,omitempty"];
  repeated cosmos.base.v1beta1.Coin fees = 5 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.moretags) = "json:\"report_fee\""];
  bytes aggregatedResult = 6 [(gogoproto.jsontag) = "aggregated_result,omitempty"];
  string resultStatus = 7 [(gogoproto.jsontag) = "result_status,omitempty"];
  Reporter reporter = 8 [(gogoproto.jsontag) = "reporter,omitempty"];	  
}

