syntax = "proto3";
package oraichain.orai.websocket;
import "gogoproto/gogo.proto";

option go_package = "github.com/oraichain/orai/x/websocket/types";

message EntryPoint{
  option (gogoproto.goproto_stringer) = true;    
  string url = 1 [(gogoproto.jsontag) = "url,omitempty"];
  repeated string headers = 2 [(gogoproto.jsontag) = "headers,omitempty,omitempty"];     
}

message Fetch {            
  option (gogoproto.goproto_stringer) = true;    
  string url = 1 [(gogoproto.jsontag) = "url,omitempty"];
  repeated string headers = 2 [(gogoproto.jsontag) = "headers,omitempty,omitempty"];    
  string method = 3 [(gogoproto.jsontag) = "method,omitempty,omitempty"]; 
  string body = 4 [(gogoproto.jsontag) = "body,omitempty,omitempty"];   
}

// Report stores the result of the data source when validator executes it
message Request {
  option (gogoproto.goproto_stringer) = true;    
  Fetch fetch = 1 [(gogoproto.jsontag) = "fetch,omitempty"];  
}

message EmptyParams {}

message RequestDataSource {
  option (gogoproto.goproto_stringer) = true;    
  EntryPoint dsource = 1 [(gogoproto.jsontag) = "dsource,omitempty"];  
  string input = 2 [(gogoproto.jsontag) = "input,omitempty"];  
}

message RequestTestCase {  
  option (gogoproto.goproto_stringer) = true;    
  EntryPoint tcase = 1 [(gogoproto.jsontag) = "tcase,omitempty"];  
  string input = 2 [(gogoproto.jsontag) = "input,omitempty"];  
  string output = 3 [(gogoproto.jsontag) = "output,omitempty"];  
}

message RequestOracleScript {
  option (gogoproto.goproto_stringer) = true;    
  repeated string results = 1 [(gogoproto.jsontag) = "results,omitempty"];  
}

message QueryDataSourceSmartContract {      
  RequestDataSource get = 1 [(gogoproto.jsontag) = "get,omitempty"];  
}

message QueryTestCaseSmartContract {    
  RequestTestCase test = 1 [(gogoproto.jsontag) = "test,omitempty"];  
}

message QueryOracleScriptSmartContract {    
  RequestOracleScript aggregate = 1 [(gogoproto.jsontag) = "aggregate,omitempty"];  
}

message QueryDataSourceEntriesSmartContract {      
  EmptyParams get_data_sources = 1 [(gogoproto.jsontag) = "get_data_sources,omitempty"];  
}

message QueryTestCaseEntriesSmartContract {      
  EmptyParams get_test_cases = 1 [(gogoproto.jsontag) = "get_test_cases,omitempty"];  
}

message QueryDataSourceContract {    
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  RequestDataSource request = 2 [(gogoproto.jsontag) = "request,omitempty"];  
}

message QueryDataSourceEntriesContract {    
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  EmptyParams request = 2 [(gogoproto.jsontag) = "request,omitempty"];  
}

message QueryTestCaseEntriesContract {    
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  EmptyParams request = 2 [(gogoproto.jsontag) = "request,omitempty"];  
}

message QueryTestCaseContract {
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  RequestTestCase request = 2 [(gogoproto.jsontag) = "request,omitempty"];  
}

message QueryOracleScriptContract {
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  RequestOracleScript request = 2 [(gogoproto.jsontag) = "request,omitempty"];  
}

// Report stores the result of the data source when validator executes it
message ResponseContract {
  option (gogoproto.goproto_stringer) = true;    
  bytes data = 1 [(gogoproto.jsontag) = "data,omitempty"];    
}