syntax = "proto3";
package oraichain.orai.aioracle;
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
option go_package = "github.com/oraichain/orai/x/aioracle/types";

message AIOracle {
  option (gogoproto.goproto_stringer) = true;
  string request_id = 1 [(gogoproto.customname) = "RequestID"];
  bytes contract = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  // Owner is the address who is allowed to make further changes to the data source.
  bytes creator = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",  (gogoproto.moretags) = "json:\"request_creator\""];
  repeated bytes validators = 4 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress",  (gogoproto.moretags) = "json:\"validator_addr\""];
  int64 block_height = 5;  
  repeated cosmos.base.v1beta1.Coin fees = 6 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.moretags) = "json:\"transaction_fee\""];
  bytes input = 7 [ (gogoproto.moretags) = "json:\"request_input\""];
}

message EntryPoint{
  option (gogoproto.goproto_stringer) = true;    
  string url = 1 [(gogoproto.jsontag) = "url,omitempty"];
  repeated string headers = 2 [(gogoproto.jsontag) = "headers,omitempty,omitempty"];     
}

message DataSourceResult {
  option (gogoproto.goproto_stringer) = true;  
  EntryPoint entryPoint = 1 [(gogoproto.jsontag) = "data_source,omitempty"];
  bytes result = 2 ;  
  string status = 3 [(gogoproto.jsontag) = "result_status,omitempty"];
}

// Report stores the result of the data source when validator executes it
message Report {
  option (gogoproto.goproto_stringer) = true;    
  string requestID = 1 [(gogoproto.jsontag) = "request_id,omitempty"];
  repeated DataSourceResult DataSourceResults = 2 [(gogoproto.moretags) = "json:\"data_source_result\"", (gogoproto.customname) = "DataSourceResults"];	  
  repeated TestCaseResult TestCaseResults = 3 [(gogoproto.moretags) = "json:\"test_case_results\"", (gogoproto.customname) = "TestCaseResults"];	  
  int64 blockHeight = 4 [(gogoproto.jsontag) = "block_height,omitempty"];
  bytes aggregatedResult = 5 [(gogoproto.jsontag) = "aggregated_result,omitempty"];
  string resultStatus = 6 [(gogoproto.jsontag) = "result_status,omitempty"];
  Reporter reporter = 7 [(gogoproto.jsontag) = "reporter,omitempty"];	  
}

// Reporter is the one who send reports from the validator back to Oraichain created by a validator
message Reporter {
  option (gogoproto.goproto_stringer) = true;  
  bytes address = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"reporter_address\""];  
  string name = 2 [(gogoproto.jsontag) = "reporter_name,omitempty"];
  bytes validator = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress", (gogoproto.moretags) = "json:\"reporter_validator\""];
}

message AIOracleResult {
  option (gogoproto.goproto_stringer) = true;
  string request_id = 1 [(gogoproto.customname) = "RequestID"];
  repeated oraichain.orai.aioracle.ValResult results = 2 [(gogoproto.nullable) = false];
  string status = 3 [(gogoproto.jsontag) = "request_status,omitempty"];
}

message Reward {
  option (gogoproto.goproto_stringer) = true;
  repeated oraichain.orai.aioracle.Validator validators = 1 [(gogoproto.nullable) = false];  
  int64 block_height = 4;
  int64 total_power = 5 [(gogoproto.jsontag) = "total_voting_power,omitempty"];
  repeated cosmos.base.v1beta1.Coin provider_fees = 6 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.moretags) = "json:\"provider_fees\""];
  repeated cosmos.base.v1beta1.Coin validator_fees = 7 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.moretags) = "json:\"validator_fees\""];
}

message TestCaseResult {
  option (gogoproto.goproto_stringer) = true;  
  EntryPoint entryPoint = 1 [(gogoproto.jsontag) = "test_case,omitempty"];
  repeated DataSourceResult DataSourceResults = 2 [(gogoproto.moretags) = "json:\"data_source_result\"", (gogoproto.customname) = "DataSourceResults"];	  
  string status = 3 [(gogoproto.jsontag) = "result_status,omitempty"];
}

message Validator {
  option (gogoproto.goproto_stringer) = true;  
  // Address is the address who is the original validator to store information of those that execute the oScript
  bytes address = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress"];
  int64 votingPower = 2;
  string status = 3;
  
}

message ValResult {
  option (gogoproto.goproto_stringer) = true;   
  Validator validator = 1 [(gogoproto.jsontag) = "validator,omitempty"];
  bytes result = 2 [(gogoproto.jsontag) = "result,omitempty"];
  string resultStatus = 3 [(gogoproto.jsontag) = "result_status,omitempty"]; // fail or success
}

// Params defines the set of wasm parameters.
message Params {
    option (gogoproto.goproto_stringer) = false;
    uint64 maximum_ai_oracle_request_bytes = 1;
    uint64 reward_ai_oracle_percentages = 2;
    uint64 reports_percentages = 3;
    uint64 maximum_ai_oracle_response_bytes = 4;
}