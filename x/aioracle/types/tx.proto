syntax = "proto3";
package oraichain.orai.aioracle;
//import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
option go_package = "github.com/oraichain/orai/x/aioracle/types";
import "google/api/annotations.proto";

// Msg defines the aioracle Msg service.
service Msg {
  // Create a new AI request
  rpc CreateAIOracle(MsgSetAIOracleReq) returns (MsgSetAIOracleRes) {
    option (google.api.http) = {
      // The `parent` captures the parent resource name, such as "shelves/1".
      post: "/aioracle/req"
      body: "*"
    };
  };
}

// MsgSetAIOracle submit ai request metadata onto Oraichain
message MsgSetAIOracleReq {
  option (gogoproto.goproto_stringer) = true;
  string request_id = 1 [(gogoproto.customname) = "RequestID"];
  bytes contract = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  // Owner is the address who is allowed to make further changes to the data source.
  bytes creator = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",  (gogoproto.moretags) = "json:\"request_creator\""];
  int64 validator_count = 5;
  string fees = 6 [(gogoproto.jsontag) = "transaction_fee,omitempty"];
  bytes input = 7;
  bool test_only = 8;
}
// MsgSetAIOracleRes returns store result data.
message MsgSetAIOracleRes{
  option (gogoproto.goproto_stringer) = true;
  string request_id = 1 [(gogoproto.customname) = "RequestID"];
  bytes contract = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  // Owner is the address who is allowed to make further changes to the data source.
  bytes creator = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",  (gogoproto.moretags) = "json:\"request_creator\""];
  int64 validator_count = 5;
  string fees = 6 [(gogoproto.jsontag) = "transaction_fee,omitempty"];
  bytes input = 7;
  bool test_only = 8;
}
