syntax = "proto3";
package oraichain.orai.aioracle;
// this line is used by starport scaffolding # 1

// this line is used by starport scaffolding # 3

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "x/aioracle/types/types_ai_oracle.proto";
option go_package = "github.com/oraichain/orai/x/aioracle/types";

// this line is used by starport scaffolding # 3

import "google/api/annotations.proto";

// Query provides defines the gRPC querier service
service Query {

    // QueryAIOracle gets the ai request meta data
    rpc QueryAIOracle (QueryAIOracleReq) returns (QueryAIOracleRes) {
        option (google.api.http).get = "/aioracle/req/{request_id}";
    }
    // QueryAIOracleIDs gets the list of ai requests
    rpc QueryAIOracleIDs (QueryAIOracleIDsReq) returns (QueryAIOracleIDsRes) {
        option (google.api.http).get = "/aioracle/reqs";
    }

    rpc DataSourceContract (QueryDataSourceContract) returns (ResponseContract) {
        
    }

    rpc TestCaseContract (QueryTestCaseContract) returns (ResponseContract) {
        
    }

    rpc OracleScriptContract (QueryOracleScriptContract) returns (ResponseContract) {
        
    }

    rpc DataSourceEntries (QueryDataSourceEntriesContract) returns (ResponseEntryPointContract) {
        
    }

    rpc TestCaseEntries (QueryTestCaseEntriesContract) returns (ResponseEntryPointContract) {
        
    }

    // QueryFullOracleReq gets the ai result meta data
    rpc QueryFullRequest (QueryFullOracleReq) returns (QueryFullOracleRes) {
        option (google.api.http).get = "/aioracle/fullorai/{request_id}";
    }
    // QueryReward gets the reward given a block height
    rpc QueryReward (QueryRewardReq) returns (QueryRewardRes) {
        option (google.api.http).get = "/aioracle/reward/{block_height}";
    }

    // QueryMinFees gets the min fees of oracle script contract
    rpc QueryMinFees (MinFeesReq) returns (MinFeesRes) {
        option (google.api.http).get = "/aioracle/min-fees";
    }

    // QueryMinGasPrices gets the min gas prices of a validator
    rpc QueryMinGasPrices (MinGasPricesReq) returns (MinGasPricesRes) {
        option (google.api.http).get = "/aioracle/min-gas-prices";
    }
}

// QueryAIOracleReq is the request type for the Query/QueryAIOracle RPC method
message QueryAIOracleReq {
    // address is the address of the contract to query
    option (gogoproto.goproto_stringer) = true;
    string request_id = 1;
}

// QueryAIOracleRes is the response type for the Query/QueryAIOracle RPC method
message QueryAIOracleRes {
  option (gogoproto.goproto_stringer) = true;
  string request_id = 1;
  bytes contract = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  // Owner is the address who is allowed to make further changes to the data source.
  bytes creator = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",  (gogoproto.moretags) = "json:\"request_creator\""];
  repeated bytes validators = 4 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress",  (gogoproto.moretags) = "json:\"validator_addr\""];
  int64 block_height = 5;  
  repeated cosmos.base.v1beta1.Coin fees = 6 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.moretags) = "json:\"transaction_fee\""];
  bytes input = 7 [ (gogoproto.moretags) = "json:\"request_input\""];
}

// QueryAIOracleIDsReq is the request type for the Query/QueryAIOracleIDs RPC method
message QueryAIOracleIDsReq {
  option (gogoproto.goproto_stringer) = true;
  int64 page = 1;
  int64 limit = 2;
}

// QueryAIOracleIDsRes is the response type for the Query/QueryAIOracleIDs RPC method
message QueryAIOracleIDsRes {
    option (gogoproto.goproto_stringer) = true;
    repeated string request_ids = 1 [(gogoproto.jsontag) = "request_ids,omitempty"];
}

message Fetch {            
  option (gogoproto.goproto_stringer) = true;    
  string url = 1 [(gogoproto.jsontag) = "url,omitempty"];
  repeated string headers = 2 [(gogoproto.jsontag) = "headers,omitempty,omitempty"];    
  string method = 3 [(gogoproto.jsontag) = "method,omitempty,omitempty"]; 
  string body = 4 [(gogoproto.jsontag) = "body,omitempty,omitempty"];   
}

// Report stores the result of the data source when validator executes it
message Request {
  option (gogoproto.goproto_stringer) = true;    
  Fetch fetch = 1 [(gogoproto.jsontag) = "fetch,omitempty"];  
}

message EmptyParams {}

message RequestDataSource {
  option (gogoproto.goproto_stringer) = true;    
  EntryPoint dsource = 1 [(gogoproto.jsontag) = "dsource,omitempty"];  
  string input = 2 [(gogoproto.jsontag) = "input,omitempty"];  
}

message RequestTestCase {
  option (gogoproto.goproto_stringer) = true;
  EntryPoint tcase = 1 [(gogoproto.jsontag) = "tcase,omitempty"];
  EntryPoint input = 2 [(gogoproto.jsontag) = "dsource,omitempty"];  
}

message RequestOracleScript {
  option (gogoproto.goproto_stringer) = true;    
  repeated string results = 1 [(gogoproto.jsontag) = "results,omitempty"];  
}

message QueryDataSourceSmartContract {      
  RequestDataSource get = 1 [(gogoproto.jsontag) = "get,omitempty"];  
}

message QueryTestCaseSmartContract {    
  RequestTestCase test = 1 [(gogoproto.jsontag) = "test,omitempty"];  
}

message QueryOracleScriptSmartContract {    
  RequestOracleScript aggregate = 1 [(gogoproto.jsontag) = "aggregate,omitempty"];  
}

message QueryDataSourceEntriesSmartContract {      
  EmptyParams get_data_sources = 1 [(gogoproto.jsontag) = "get_data_sources,omitempty"];  
}

message QueryTestCaseEntriesSmartContract {      
  EmptyParams get_test_cases = 1 [(gogoproto.jsontag) = "get_test_cases,omitempty"];  
}

message QueryDataSourceContract {    
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  RequestDataSource request = 2 [(gogoproto.jsontag) = "request,omitempty"];  
}

message QueryDataSourceEntriesContract {    
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  EmptyParams request = 2 [(gogoproto.jsontag) = "request,omitempty"];  
}

message QueryTestCaseEntriesContract {    
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  EmptyParams request = 2 [(gogoproto.jsontag) = "request,omitempty"];  
}

message QueryTestCaseContract {
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  RequestTestCase request = 2 [(gogoproto.jsontag) = "request,omitempty"];  
}

message QueryOracleScriptContract {
  option (gogoproto.goproto_stringer) = true;    
  bytes contract = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.moretags) = "json:\"contract\""]; 
  RequestOracleScript request = 2 [(gogoproto.jsontag) = "request,omitempty"];  
}

// Report stores the result of the data source when validator executes it
message ResponseContract {
  option (gogoproto.goproto_stringer) = true;    
  bytes data = 1 [(gogoproto.jsontag) = "data,omitempty"];    
}

message ResponseEntryPointContract {
  option (gogoproto.goproto_stringer) = true;    
  repeated EntryPoint data = 1 [(gogoproto.jsontag) = "data,omitempty"];    
}

// QueryRewardReq is the request type for the Query/QueryReward RPC method
message QueryRewardReq {
    // address is the address of the contract to query
    option (gogoproto.goproto_stringer) = true;
    string block_height = 1;
}

// QueryRewardRes is the response type for the Query/QueryReward RPC method
message QueryRewardRes {
  Reward reward = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "json:\"block_reward\""];
}

// QueryFullOracleReq is the request type for the Query/QueryFullOracleReq RPC method
message QueryFullOracleReq {
    // address is the address of the contract to query
    option (gogoproto.goproto_stringer) = true;
    string request_id = 1;
}

// QueryFullOracleRes is the response type for the Query/QueryFullOracleRes RPC method
message QueryFullOracleRes {
  option (gogoproto.goproto_stringer) = true;
  AIOracle ai_oracle = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "AIOracle", (gogoproto.moretags) = "json:\"ai_oracle\""];
  repeated Report reports = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "json:\"reports\""];
  AIOracleResult result = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "json:\"ai_result\""];
}

// MinFeesReq is the request type for the Query/QueryMinFees RPC method
message MinFeesReq {
  string contract_addr = 1;        
	int64 val_num = 2;
  bool test_only = 3;
}

// MinFeesRes is the response type for the Query/QueryMinFees RPC method
message MinFeesRes {
  string minimum_fees = 1;
}

// MinGasPricesReq is the request type for the Query/QueryMinGasPrices RPC method
message MinGasPricesReq {   
}

// MinGasPricesRes is the response type for the Query/QueryMinGasPrices RPC method
message MinGasPricesRes {
  string min_gas_prices = 1;
}